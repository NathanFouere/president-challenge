import { inject } from '@adonisjs/core';

import { EventType } from '@shared/dist/event/event-type.js';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import IEventDefinitionRepository from '#event/domain/repository/i_event_definition_repository';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import IChoiceRepository from '#event/domain/repository/i_choice_repository';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import IChoiceDefinitionRepository from '#event/domain/repository/i_choice_definition_repository';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import IEventRepository from '#event/domain/repository/i_event_repository';
import type { StartupProcessorStep } from '#common/startup/startup_processor_step';
import { anEvent } from '#event/application/builders/event_builder';
import { aChoice } from '#event/application/builders/choice_builder';

@inject()
export class EventStartupService implements StartupProcessorStep {
  constructor(
    private readonly eventDefinitionRepository: IEventDefinitionRepository,
    private readonly choiceRepository: IChoiceRepository,
    private readonly choiceDefinitionRepository: IChoiceDefinitionRepository,
    private readonly eventRepository: IEventRepository,
  ) {
  }

  public async execute(gameId: number): Promise<void> {
    const eventDefinitions = await this.eventDefinitionRepository.getAll();
    const choiceDefinitions = await this.choiceDefinitionRepository.getAll();

    const events = [];
    for (const eventDefinition of eventDefinitions) {
      if (eventDefinition.type == EventType.Autogenerated) {
        continue;
      }
      events.push(anEvent()
        .withGameId(gameId)
        .withTurn(eventDefinition.turn)
        .withDisplayable(eventDefinition.isDisplayableByDefault)
        .withBeenRead(false)
        .withIsAvailable(eventDefinition.isAvailableByDefault)
        .withDefinitionId(eventDefinition.id)
        .build(),
      );
    }
    await this.eventRepository.createMany(events);

    const choices = [];
    for (const choiceDefinition of choiceDefinitions) {
      const choiceEventId = events.find(event => event.definitionId === choiceDefinition.eventDefinitionId)!.id;
      const choiceTriggerEventId = events.find(event => event.definitionId === choiceDefinition.triggerEventDefinitionId)?.id;

      choices.push(aChoice()
        .withEventId(choiceEventId)
        .withTriggerEventId(choiceTriggerEventId)
        .withDefinitionId(choiceDefinition.id)
        .withGameId(gameId)
        .build(),
      );
    }

    await this.choiceRepository.createMany(choices);
  }
}
